%layers {
	position: relative;
	img {
		position: absolute;
		top: 0;
		left: 0;
		width: $f;
		display: block;
		&:nth-child(1) {
			position: relative;
		}
	}
}

@mixin line_top($n, $ratio) {
	height: calc(#{percentage($ratio)});
}
.layers {
	align-items: center;
	p {
		color: $dark-gray;
	}
	&__{
		&header, &wrapper {
			@include grow('md');
		}
		&content {
			@include grow('small', 'top');
		}
		&header {
			@include breakpoint() {
				.layers--grid & {
					padding-right: em($p*2);
				}
			}
		}
		&wrapper {
			position: relative;
			@include breakpoint() {
				.layers--grid & {
					padding-left: em($p*2);
				}
			}
		}
		// &wrapper {
		// 	@include breakpoint() {
		// 		width: $f*0.8;
		// 		margin-left: $p*0.2;
		// 	}
		// }
		&render {
			@extend %layers;
			@include breakpoint() {
				img {
					&:not(.animate){
						opacity: 0;
						transform: translate3d(0, $p*-1, 0);
						transition: transform $speed, opacity $speed;
						@for $i from 0 through 5 {
							&[data-layer="#{$i}"] {
								$de: (0.05s * $i);
								transition-delay: $de;
							}
						}
						.layers--inview & {
							opacity: 1;
							transform: translate3d(0, 0, 0);
						}
					}
				}
			}
		}
		&images {
			position: relative;
			line-height: 0;
			&:before {
				display: block;
				content: '';
				padding-top: percentage(592px/2200px);
			}
			.layers__render {
				@include full;
				overflow: hidden;
				img {
					@include full;
				}
			}
			img {
				position: absolute;
				top: 0;
				left: 0;
				width: $f;
			}
			svg {
				@include full;
			}
			@include breakpoint() {
				position: absolute;
				width: $f;
				left: 0;
				top: 50%;
				transform: translate3d(0, -50%, 0);
				.layers--grid & {
					left: em($p*2);
					width: calc(#{$f} - #{em($p*2)});
				}
			}
		}
		&last {
			&--hidden {
				opacity: 0;
			}
		}
		&pointer {
			&s {
				display: flex;
				flex-wrap: wrap;
				@include breakpoint() {		
					flex-wrap: nowrap;
				}
			}
			.layers__title {
				font-size: 1em;
				padding-bottom: em($p/2, 22px);
			}
			p {
				font-size: em(12px);
			}
			//padding-top: em($p*2);
			text-align: center;
			width: $f;
			flex: 0 0 auto;
			@include breakpoint() {
				opacity: 0;
				transform: translate3d(0, $p, 0);
				width: auto;
				position: relative;
				flex: 1;
				cursor: pointer;
				transition: padding-top $speed, opacity $speed, transform $speed;
				&--odd {
					&:before {
						display: block;
						content: '';
						padding-bottom: em($p*4);
					}
				}
				&--even {
					&:after {
						display: block;
						content: '';
						padding-bottom: em($p*4);
					}
				}
				.layers__pointers & {
					@for $i from 1 through 10 {
						$de: (0.25s * $i) - 0.25s;
						&:nth-child(#{$i}) {
							transition-delay: $de;
						}
					}
				}
				.layers[data-count="1"] & {
					&:nth-child(odd) {
						&:before {
							padding-top: percentage(592px/2200px);
						}
					}
				}
				.layers[data-count="2"] & {
					&:nth-child(odd) {
						&:before {
							padding-top: percentage(592px/2200px)*2;
						}
					}
				}
				.layers[data-count="3"] & {
					&:nth-child(odd) {
						&:before {
							padding-top: percentage(592px/2200px)*3;
						}
					}
				}
				.layers[data-count="4"] & {
					&:nth-child(odd) {
						&:before {
							padding-top: percentage(592px/2200px)*4;
						}
					}
				}
				.layers[data-count="5"] & {
					&:nth-child(odd) {
						&:before {
							padding-top: percentage(592px/2200px)*5;
						}
					}
				}
				.layers[data-count="6"] & {
					&:nth-child(odd) {
						&:before {
							padding-top: percentage(592px/2200px)*6;
						}
					}
				}
				.layers[data-count="7"] & {
					&:nth-child(odd) {
						&:before {
							padding-top: percentage(592px/2200px)*7;
						}
					}
				}
				.layers[data-count="1"] & {
					&:nth-child(even) {
						&:after {
							padding-top: percentage(592px/2200px);
						}
					}
				}
				.layers[data-count="2"] & {
					&:nth-child(even) {
						&:after {
							padding-top: percentage(592px/2200px)*2;
						}
					}
				}
				.layers[data-count="3"] & {
					&:nth-child(even) {
						&:after {
							padding-top: percentage(592px/2200px)*3;
						}
					}
				}
				.layers[data-count="4"] & {
					&:nth-child(even) {
						&:after {
							padding-top: percentage(592px/2200px)*4;
						}
					}
				}
				.layers[data-count="5"] & {
					&:nth-child(even) {
						&:after {
							padding-top: percentage(592px/2200px)*5;
						}
					}
				}
				.layers[data-count="6"] & {
					&:nth-child(even) {
						&:after {
							padding-top: percentage(592px/2200px)*6;
						}
					}
				}
				.layers[data-count="7"] & {
					&:nth-child(even) {
						&:after {
							padding-top: percentage(592px/2200px)*7;
						}
					}
				}
				.layers--inview & {
					opacity: 1;
					transform: translate3d(0, 0, 0);
				}
				.layers--inview .layers__pointers:hover & {
					opacity: .4;
					// &:nth-child(even) {
					// 	padding-top: em($p*4);
					// }
				}
				&:hover {
					.layers--inview & {
						opacity: 1!important;
						//padding-top: em($p*2)!important;
					}
				}
			}
		}
		&content {
			@include breakpoint() {
				background-color: #fff;
				position: relative;
				z-index: 2;
				padding: {
					left: em($p/2);
					right: em($p/2);
				}
			}
		}
		&line {
			&s{
				display: none;
				@include breakpoint() {
					display: flex;
					align-items: flex-start;
					@include full;
				}
			}
			@include breakpoint() {
				transition: all $speed;
				flex: 0 0 auto;
				position: relative;
				&--odd {
					align-self: flex-end;
				}
				.layers[data-count="1"] & {
					width: $f;
				}
				.layers[data-count="2"] & {
					width: $f/2;
				}
				.layers[data-count="3"] & {
					width: $f/3;
				}
				.layers[data-count="4"] & {
					width: $f/4;
				}
				.layers[data-count="5"] & {
					width: $f/5;
				}
				.layers[data-count="6"] & {
					width: $f/6;
				}
				.layers[data-count="7"] & {
					width: $f/7;
				}
				&:after {
					width: 10px;
					height: 10px;
					content: '';
					position: absolute;
					left: 50%;
					margin: 0 0 0 -5px;
					border-radius: $f;
					border: 2px solid $brand-main;
					background-color: #fff;
					transition: border-color $speed, background-color $speed;
				}
				&:before {
					left: 50%;
					width: 2px;
					margin-left: -1px;
					content: '';
					position: absolute;
					height: $f;
					background-color: $brand-main;
					top: 0;
					transition: background-color $speed;
				}
				&--odd {
					&:after {
						top: -5px;
					}
				}
				&--even {
					&:after {
						bottom: -5px;
					}
				}
				&.layers__line--active {
					opacity: 1!important;
					&:before {
						background-color: $alternate-color;
					}
					&:after {
						border-color: $alternate-color;
						background-color: $highlight-color;
					}
				}
				@each $n, $ratio in (0, (227/592)), (1, (296/592)), (2, (296/592)), (3, (296/592)), (4, (360/592)), (5, (403/592)), ("cover", (296/592)) {
					&[data-line*="#{$n}"] {
						@include line_top($n, $ratio);
					}
				}
				// .layers--inview .layers__pointers:hover & {
				// 	opacity: 0;
				// }
				// .layers__pointers .layers__pointer:nth-child(odd):not(:hover) &, .layers:not(.layers--inview) .layers__pointer:nth-child(odd):hover &  {
				// 	bottom: calc(#{$f} - #{em($p*3.5)});
				// }
				// .layers--inview .layers__pointer:not([data-layer-to="0"]):hover & {
				// 	margin-top: -60px;
				// }
				// .layers--inview .layers__pointer:hover & {
				// 	opacity: 1;
				// 	background-color: $alternate-color;
				// 	&:before {
				// 		border-color: $alternate-color;
				// 	}
				// 	&:after {
				// 		background-color: $lighter-color;
				// 	}
				// }
			}
		}
	}
}